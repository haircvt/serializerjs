{"version":3,"sources":["../../../src/Serializer/SerializerInterface.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BqB;;;;;;;;;;;;;;;;;;8BAWP,MAAM,QAAQ,SAAS;AAC7B,YAAM,iDAAuC,oCAAvC,CAAN,CAD6B;;;;;;;;;;;;;;sCAYf,MAAqB;UAAf,+DAAS,oBAAM;;AACnC,YAAM,iDAAuC,4CAAvC,CAAN,CADmC;;;;;;;;;;;;;;;;;gCAe3B,MAAM,WAA0C;UAA/B,+DAAS,oBAAsB;UAAhB,gEAAU,oBAAM;;AACxD,YAAM,iDAAuC,sCAAvC,CAAN,CADwD;;;;;;;;;;;;;;;wCAaxC,MAAM,WAA0B;UAAf,+DAAS,oBAAM;;AAChD,YAAM,iDAAuC,8CAAvC,CAAN,CADgD;;;;SAnDnC","file":"SerializerInterface.js","sourcesContent":["/*\n * This file is part of the JsSerializer package.\n *\n * (c) HAIRCVT <hello@haircvt.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SerializationError from './../Error/SerializationError';\nimport UnimplementedSerializerMethodError from './../Error/UnimplementedSerializerMethodError';\n\n/**\n * A serializer is responsible for transforming a data in a specific format into a data in another format.\n *\n * For example, the serializer can be used to map client-side models and back-end side objects by checking all the\n * properties of a model to generate an object for which the values are understandable for the back-end service.\n *\n * +--------+ ----- serialize -----> +----------+\n * | Client |                        | Back-End |\n * +--------+ <---- deserialize ---- +----------+\n *\n * Note that JavaScript does not support interfaces per se. But \"Interface\" it is meant that this class should not\n * implement any method but provide the skeleton for child classes instead.\n *\n * @interface\n * @author ThÃ©o FIDRY <theo.fidry@gmail.com>\n */\nexport default class SerializerInterface {\n    /**\n     * Serializes any data object into and object usable for the backend service.\n     *\n     * @param {*}      data    Any data\n     * @param {string} format  Format the normalization result will be encoded as\n     * @param {*}      context Options serializers have access to\n     *\n     * @return {*}\n     * @throw SerializationError\n     */\n    serialize(data, format, context) {\n        throw new UnimplementedSerializerMethodError('Unimplemented \"serialize()\" method');\n    }\n\n    /**\n     * Checks whether the given class is supported for serialization by this serializer.\n     *\n     * @param {*}      data          Any data\n     * @param {string} [format=null] Format the normalization result will be encoded as\n     *\n     * @return {boolean}\n     */\n    supportsSerialize(data, format = null) {\n        throw new UnimplementedSerializerMethodError('Unimplemented \"supportsSerialize()\" method');\n    }\n\n    /**\n     * Deserializes data back into an object of the given class.\n     *\n     * @param {*}       data             Data to restore\n     * @param {string}  className        The expected class to instantiate\n     * @param {?string} [format=null]    Format the given data was extracted from\n     * @param {*}       [context=null]   Options available to the deserializer\n     *\n     * @return {*}\n     * @throw SerializationError\n     */\n    deserialize(data, className, format = null, context = null) {\n        throw new UnimplementedSerializerMethodError('Unimplemented \"deserialize()\" method');\n    }\n\n    /**\n     * Checks whether the given class is supported for deserialization by this serializer.\n     *\n     * @param {*}       data          Data to restore\n     * @param {string}  className     The expected class to instantiate\n     * @param {?string} [format=null] Format the given data was extracted from\n     *\n     * @return {boolean}\n     */\n    supportsDeserialize(data, className, format = null) {\n        throw new UnimplementedSerializerMethodError('Unimplemented \"supportsDeserialize()\" method');\n    }\n}\n"]}
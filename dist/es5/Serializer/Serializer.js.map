{"version":3,"sources":["../../../src/Serializer/Serializer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsBqB;;;;;;;AAIjB,aAJiB,UAIjB,CAAY,WAAZ,EAAyB;8BAJR,YAIQ;;2EAJR,uBAKP,cADe;;;;;;;;AAGrB,iCAAyB,YAAY,MAAZ,4BAAzB,oGAA+C;oBAApC,yBAAoC;;AAC3C,oBAAI,UAAU,mDAAV,EAAqD;AACrD,0BAAM,iGAC2D,WAAW,WAAX,aAD3D,CAAN,CADqD;iBAAzD;;AAMA,oBAAI,+CAAJ,EAA2C;AACvC,+BAAW,aAAX,QADuC;iBAA3C;aAPJ;;;;;;;;;;;;;;;;;;;SAHqB;;AAmBrB,cAAK,YAAL,GAAoB,WAApB,CAnBqB;;KAAzB;;;;;;iBAJiB;;kCA6BP,MAAM,QAAQ,SAAS;AAC7B,gBAAM,aAAa,KAAK,8BAAL,CAAoC,IAApC,EAA0C,MAA1C,EAAkD,OAAlD,CAAb,CADuB;AAE7B,gBAAI,SAAS,UAAT,EAAqB;AACrB,uBAAO,WAAW,SAAX,CAAqB,IAArB,EAA2B,MAA3B,EAAmC,OAAnC,CAAP,CADqB;aAAzB;;AAIA,kBAAM,oFAAwE,UAAxE,CAAN,CAN6B;;;;;;;;;0CAYf,MAAqB;gBAAf,+DAAS,oBAAM;;AACnC,mBAAO,SAAS,KAAK,8BAAL,CAAoC,IAApC,EAA0C,MAA1C,CAAT,CAD4B;;;;;;;;;oCAO3B,MAAM,WAA0C;gBAA/B,+DAAS,oBAAsB;gBAAhB,gEAAU,oBAAM;;AACxD,gBAAM,aAAa,KAAK,gCAAL,CAAsC,IAAtC,EAA4C,SAA5C,EAAuD,MAAvD,CAAb,CADkD;AAExD,gBAAI,SAAS,UAAT,EAAqB;AACrB,uBAAO,WAAW,WAAX,CAAuB,IAAvB,EAA6B,SAA7B,EAAwC,MAAxC,EAAgD,OAAhD,CAAP,CADqB;aAAzB;;AAIA,kBAAM,sFAA0E,UAA1E,CAAN,CANwD;;;;;;;;;4CAYxC,MAAM,WAA0B;gBAAf,+DAAS,oBAAM;;AAChD,mBAAO,SAAS,KAAK,gCAAL,CAAsC,IAAtC,EAA4C,SAA5C,EAAuD,MAAvD,CAAT,CADyC;;;;;;;;;;;;;uDAWrB,MAAqB;gBAAf,+DAAS,oBAAM;;;;;;AAChD,sCAAyB,KAAK,YAAL,CAAkB,MAAlB,6BAAzB,wGAAqD;wBAA1C,0BAA0C;;AACjD,wBAAI,SAAS,WAAW,iBAAX,CAA6B,IAA7B,EAAmC,MAAnC,CAAT,EAAqD;AACrD,+BAAO,UAAP,CADqD;qBAAzD;iBADJ;;;;;;;;;;;;;;aADgD;;AAOhD,mBAAO,IAAP,CAPgD;;;;;;;;;;;;;;yDAkBnB,MAAM,WAAW,QAAQ;;;;;;AACtD,sCAAyB,KAAK,YAAL,CAAkB,MAAlB,6BAAzB,wGAAqD;wBAA1C,0BAA0C;;AACjD,wBAAI,SAAS,WAAW,mBAAX,CAA+B,IAA/B,EAAqC,SAArC,EAAgD,MAAhD,CAAT,EAAkE;AAClE,+BAAO,UAAP,CADkE;qBAAtE;iBADJ;;;;;;;;;;;;;;aADsD;;AAOtD,mBAAO,IAAP,CAPsD;;;;WAzFzC","file":"Serializer.js","sourcesContent":["/*\n * This file is part of the JsSerializer package.\n *\n * (c) HAIRCVT <hello@haircvt.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SerializerAware from './SerializerAware';\nimport SerializerInterface from './SerializerInterface';\nimport SerializationError from './../Error/SerializationError';\nimport UnexpectedTypeError from './../Error/UnexpectedTypeError';\n\n/**\n * Default serializer.\n *\n * Meant to aggregate all the application serializers and be used as the main serializer in the application. This means\n * that for serializing a new object, a custom serializer for this one should be done and registered to this serializer.\n *\n * @author Th√©o FIDRY <theo.fidry@gmail.com>\n */\nexport default class Serializer extends SerializerInterface {\n    /**\n     * @param {Map.<string,SerializerInterface>} serializers\n     */\n    constructor(serializers) {\n        super(serializers);\n\n        for (const serializer of serializers.values()) {\n            if (false === serializer instanceof SerializerInterface) {\n                throw new UnexpectedTypeError(\n                    `Expected serializer to implement SerializerInterface. Got ${serializer.constructor} instead`\n                );\n            }\n\n            if (serializer instanceof SerializerAware) {\n                serializer.setSerializer(this);\n            }\n        }\n\n        /**\n         * @type {Map.<string, SerializerInterface>}\n         * @private\n         */\n        this._serializers = serializers;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    serialize(data, format, context) {\n        const serializer = this._getSerializerForSerialization(data, format, context);\n        if (null !== serializer) {\n            return serializer.serialize(data, format, context);\n        }\n\n        throw new SerializationError(`An unexpected value could not be serialized: \"${data}\"`);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    supportsSerialize(data, format = null) {\n        return null !== this._getSerializerForSerialization(data, format);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    deserialize(data, className, format = null, context = null) {\n        const serializer = this._getSerializerForDeserialization(data, className, format);\n        if (null !== serializer) {\n            return serializer.deserialize(data, className, format, context);\n        }\n\n        throw new SerializationError(`An unexpected value could not be deserialized: \"${data}\"`);\n    }\n\n    /**\n     * @inheritDocz\n     */\n    supportsDeserialize(data, className, format = null) {\n        return null !== this._getSerializerForDeserialization(data, className, format);\n    }\n\n    /**\n     * @param {*}      data          Any data\n     * @param {string} [format=null] Format the normalization result will be encoded as\n     *\n     * @return {?SerializerInterface}\n     * @private\n     */\n    _getSerializerForSerialization(data, format = null) {\n        for (const serializer of this._serializers.values()) {\n            if (true === serializer.supportsSerialize(data, format)) {\n                return serializer;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * @param {*}       data      Data to restore\n     * @param {string}  className The expected class to instantiate\n     * @param {?string} format    Format the given data was extracted from\n     *\n     * @return {?SerializerInterface}\n     * @private\n     */\n    _getSerializerForDeserialization(data, className, format) {\n        for (const serializer of this._serializers.values()) {\n            if (true === serializer.supportsDeserialize(data, className, format)) {\n                return serializer;\n            }\n        }\n\n        return null;\n    }\n}\n"]}
{"version":3,"sources":["../../../src/Serializer/AbstractSerializer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmBqB;;;;;;;;;;;;;;;8BAIP,MAAM,QAAQ,SAAS;AAC7B,aAAO,IAAP,CAD6B;;;;;;;;;sCAOf,MAAqB;UAAf,+DAAS,oBAAM;;AACnC,aAAO,KAAP,CADmC;;;;;;;;;gCAO3B,MAAM,WAA0C;UAA/B,+DAAS,oBAAsB;UAAhB,gEAAU,oBAAM;;AACxD,aAAO,IAAP,CADwD;;;;;;;;;wCAOxC,MAAM,WAA0B;UAAf,+DAAS,oBAAM;;AAChD,aAAO,KAAP,CADgD;;;;SAzBnC","file":"AbstractSerializer.js","sourcesContent":["/*\n * This file is part of the JsSerializer package.\n *\n * (c) HAIRCVT <hello@haircvt.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SerializerAware from './SerializerAware';\n\n/**\n * Base class that can be used for writing a custom serializer. It is especially convenient if your serializer do only\n * serialization or only deserialization. If not, it you are better off implementing SerializerAwareInterface or\n * SerializerInterface.\n *\n * @abstract\n * @author Th√©o FIDRY <theo.fidry@gmail.com>\n */\nexport default class AbstractSerializer extends SerializerAware {\n    /**\n     * @inheritDoc\n     */\n    serialize(data, format, context) {\n        return data;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    supportsSerialize(data, format = null) {\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    deserialize(data, className, format = null, context = null) {\n        return data;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    supportsDeserialize(data, className, format = null) {\n        return false;\n    }\n}\n"]}